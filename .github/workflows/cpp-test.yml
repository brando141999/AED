name: C++ CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      checks: write
      actions: write
      contents: read

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y g++ cmake libgtest-dev jq libxml2-utils

      - name: Build project
        run: |
          mkdir -p build
          cd build
          cmake ..
          make

      - name: Run tests and generate reports
        run: |
          cd build
          ./test_DLinkedList --gtest_output="xml:DLinkedList.xml"
          ./test_ForwardList --gtest_output="xml:ForwardList.xml"
          ./test_CircularDLL --gtest_output="xml:CircularDLL.xml"
          ./test_BinarySearchTree --gtest_output="xml:BinarySearchTree.xml"
          ./test_HashTable_Set --gtest_output="xml:HashTable_Set.xml"
          ./test_HashTable_Map --gtest_output="xml:HashTable_Map.xml"

      - name: Publish individual test reports
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Si es un fork, usa un PAT
        run: |
          cd build
          REPORTS=(
            "DLinkedList.xml"
            "ForwardList.xml"
            "CircularDLL.xml"
            "BinarySearchTree.xml"
            "HashTable_Set.xml"
            "HashTable_Map.xml"
          )

          for REPORT in "${REPORTS[@]}"; do
            if [ -f "$REPORT" ]; then
              SUITE_NAME=$(basename "$REPORT" .xml)
              FAILURES=$(xmllint --xpath 'string(//testsuite/@failures)' "$REPORT")
              ERROR=$(xmllint --xpath 'string(//testsuite/@errors)' "$REPORT")
          
              CONCLUSION="success"
              if [ "$FAILURES" -gt 0 ] || [ "$ERROR" -gt 0 ]; then
                CONCLUSION="failure"
              fi

              # Obtener el SHA del commit actual
              HEAD_SHA=$(git rev-parse HEAD)

              # Leer el contenido del XML y escapar caracteres especiales
              XML_CONTENT=$(cat "$REPORT" | jq -sR .)

              # Crear el JSON para el campo output
              OUTPUT_JSON=$(jq -n \
                --arg title "$SUITE_NAME Test Results" \
                --arg summary "$(xmllint --xpath '//testsuite/@name' "$REPORT")" \
                --argjson text "$XML_CONTENT" \
                '{title: $title, summary: $summary, text: $text}')

              # Crear el check con el SHA del commit
              gh api repos/${{ github.repository }}/check-runs \
                -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                -f name="Test Suite: $SUITE_NAME" \
                -f head_sha="$HEAD_SHA" \
                -f status="completed" \
                -f conclusion="$CONCLUSION" \
                -f output="$OUTPUT_JSON"
            fi
          done